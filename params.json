{"name":"simplify-java","tagline":"Simplification of a 2D-polyline or a 3D-polyline","body":"# simplify-java #\r\n\r\nSimplification of a 2D-polyline or a 3D-polyline.\r\n\r\n  * Uses Radial-Distance algorithm (fast) or Douglas-Peucker (high quality) algorithm\r\n  * Port of [mourner / simplify-js](https://github.com/mourner/simplify-js), a High-performance JavaScript 2D/3D\r\n    polyline simplification library by Vladimir Agafonkin\r\n  * Can handle arbitrary objects carrying coordinates (2D, 3D)\r\n    * either by implementing an interface\r\n    * or by providing a helper extracting the coordinates\r\n  * Leaves the objects untouched, just creates a new array referencing the simplified points\r\n  * requires Java 5\r\n  * Maven Build\r\n  * JUnit-tested\r\n    * 94% lines covered\r\n    * reference data is created by \"original\" JavaScript implementation (Version 1.1.0)\r\n\r\n# Example #\r\n\r\n```java\r\n    // create an instance of the simplifier (empty array needed by List.toArray)\r\n    Simplify<Point> simplify = new Simplify<Point>(new MyPoint[0]);\r\n\r\n    // here we have an array with hundreds of points\r\n    Point[] allPoints = ...\r\n    double tolerance = ...\r\n    boolean highQuality = true; // Douglas-Peucker, false for Radial-Distance\r\n\r\n    // run simplification process\r\n    Point[] lessPoints = simplify.simplify(allPoints, tolerance, highQuality);\r\n```\r\n\r\n**Please note**\r\nThe algorithm squares differences of x, y and z coordinates. If this difference is less than 1,\r\nthe square of it will get even less. In such cases, the tolerance has negative effect.\r\n\r\nSolution: multiply your coordinates by a factor so the values are shifted in a way so that taking\r\nthe square of the differences creates greater values.\r\n\r\nIf your Points don't have the `com.goebl.simplify.Point` interface, you can implement it on your\r\nPoint-Class, or (better w.r.t. separation of concerns) provide an implementation of the\r\n`PointExtractor` interface.\r\n \r\nHere is an example (taken from the test cases):\r\n\r\nExample for your own point-class, let's assume it's not possible/desirable to\r\nlet it implement com.goebl.simplify.Point interface: \r\n\r\n```java\r\npublic class LatLng {\r\n    private final double lat;\r\n    private final double lng;\r\n\r\n    public LatLng(double lat, double lng) {\r\n        this.lat = lat;\r\n        this.lng = lng;\r\n    }\r\n\r\n    public double getLat() {\r\n        return lat;\r\n    }\r\n\r\n    public double getLng() {\r\n        return lng;\r\n    }\r\n}\r\n```\r\n\r\nIn the class where you simplify the points, you need a **PointExtractor**. As mentioned above,\r\nthe resulting x and y values are shifted in a space where delta-x and delta-y are no longer very\r\nsmall numbers below 1:\r\n\r\n```java\r\nprivate static PointExtractor<LatLng> latLngPointExtractor = new PointExtractor<LatLng>() {\r\n    @Override\r\n    public double getX(LatLng point) {\r\n        return point.getLat() * 1000000;\r\n    }\r\n\r\n    @Override\r\n    public double getY(LatLng point) {\r\n        return point.getLng() * 1000000;\r\n    }\r\n};\r\n```\r\n\r\nSimplification now works like this. Using a `PointExtractor` has the positive effect that you get\r\nan array of your original points, not copies:\r\n\r\n```java\r\nLatLng[] coords = ... // the array of your \"original\" points\r\n\r\nSimplify<LatLng> simplify = new Simplify<LatLng>(new LatLng[0], latLngPointExtractor);\r\n\r\nLatLng[] simplified = simplify.simplify(coords, 20f, false);\r\n```\r\n\r\nFor more examples see src/test/java/**/*Test.\r\n\r\n# Maven Coordinates\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.goebl</groupId>\r\n    <artifactId>simplify</artifactId>\r\n    <version>1.0.0</version>\r\n    \r\n    <!-- or -->\r\n\r\n    <groupId>com.goebl</groupId>\r\n    <artifactId>simplify</artifactId>\r\n    <version>1.0.1-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\nGradle\r\n\r\n    'com.goebl:simplify:1.0.0'\r\n\r\nNot using Maven/Gradle? - Then you can download the plain JAR from following links directly:\r\n\r\n * [SNAPSHOT Versions](https://oss.sonatype.org/content/groups/staging/com/goebl/simplify/)\r\n * [RELEASE Versions](http://repo.maven.apache.org/maven2/com/goebl/simplify/)\r\n\r\n# Licence #\r\n\r\n  * [The MIT License](http://opensource.org/licenses/MIT)\r\n\r\n# TODO #\r\n\r\n  * publish gh_pages (JavaDoc)\r\n\r\n# Alternatives / Infos #\r\n\r\n  * <http://www.codeproject.com/Articles/114797/Polyline-Simplification>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}